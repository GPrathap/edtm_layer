elevation_mapping:
  ros__parameters:
    map_frame_id:                               odom
    robot_base_frame_id:                        base_link
    robot_pose_with_covariance_topic:           /not_using
    robot_odometry:                             /odometry/global
    robot_pose_cache_size:                      200
    input_sources_types: [front]
    input_sources:
      front: # A name to identify the input source
        type: pointcloud # Supported types: pointcloud
        topic: /front_camera/points
        queue_size: 1
        publish_on_update: true # wheter to publish the elevation map after a callback from this source.
        sensor_processor: perfect
    track_point_frame_id:                       base_link
    track_point_x:                              0.0
    track_point_y:                              0.0
    track_point_z:                              0.0
    min_update_rate:                            2.0
    time_tolerance:                             1.0
    time_offset_for_point_cloud:                0.0
    sensor_processor/ignore_points_above:       0.4
    robot_motion_map_update/covariance_scale:   0.01

    # Map.
    length_in_x:                                6.0
    length_in_y:                                6.0
    position_x:                                 0.0
    position_y:                                 0.0
    resolution:                                 0.1
    min_variance:                               0.0001
    max_variance:                               0.05
    mahalanobis_distance_threshold:             2.5
    multi_height_noise:                         0.001
    surface_normal_positive_axis:               z
    fused_map_publishing_rate:                  0.5
    enable_visibility_cleanup:                  false
    visibility_cleanup_rate:                    1.0
    scanning_duration:                          1.0

    # Init submap
    initialize_elevation_map:                   false
    initialization_method:                      0
    length_in_x_init_submap:                    1.0
    length_in_y_init_submap:                    1.0
    margin_init_submap:                         0.3
    init_submap_height_offset:                  0.01
    target_frame_init_submap:                   base_footprint

    postprocessor_pipeline: # set by postprocessor_pipeline_name
      # Fill holes in the map with inpainting.
      filter1:
        name: inpaint
        type: gridMapCv/InpaintFilter
        params:
          input_layer: elevation
          output_layer: elevation_inpainted
          radius: 0.05

      # Compute Surface normals
      filter2:
        name: surface_normals
        type: gridMapFilters/NormalVectorsFilter
        params:
          input_layer: elevation_inpainted
          output_layers_prefix: normal_vectors_
          radius: 0.1
          normal_vector_positive_axis: z

      #  Delete layers that are not needed to reduce bandwidth
      # filter3:
      #   name: delete_original_layers
      #   type: gridMapFilters/DeletionFilter
      #   params:
      #     layers: [lowest_scan_point,sensor_x_at_lowest_scan, sensor_y_at_lowest_scan, sensor_z_at_lowest_scan] # List of layers.

point_cloud_processing:
  ros__parameters:
    # point_cloud_topic: "/front_lidar/scan_PointCloud2"
    # point_cloud_topic_world: "/lidar/world/points"
